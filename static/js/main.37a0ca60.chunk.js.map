{"version":3,"sources":["config.js","components/SearchForm.js","components/Nav.js","components/Photo.js","components/PhotoList.js","components/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["apiKey","Search","onSearchChange","e","setState","query","value","handleSubmit","preventDefault","props","performSearch","currentTarget","reset","history","push","className","onSubmit","this","type","name","placeholder","required","onChange","ref","input","id","fill","height","viewBox","width","xmlns","d","PureComponent","withRouter","Nav","onClick","exact","to","Photo","src","url","key","alt","title","PhotoList","photos","results","data","activeSearch","getUrl","url_l","url_sq","loading","map","photo","loadedSearch","NotFound","App","axios","get","then","response","length","h2","handleNoResults","catch","error","console","log","state","redirect","buildPhotoStates","searches","i","SearchForm","path","render","search","component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.37a0ca60.chunk.js","sourcesContent":["const apiKey = '9f7c6978fbb51c53a1b4cdcc0339fb02';\r\nexport default apiKey;\r\n\r\n//secret = 1ad54553596e4676","import React, { PureComponent } from 'react';\r\nimport { withRouter }from 'react-router-dom';\r\n\r\nclass Search extends PureComponent {\r\n\r\n  //Sets the state of query to the search input text\r\n  onSearchChange = (e) => {\r\n    this.setState({\r\n      query: this.query.value,\r\n    });\r\n  };\r\n\r\n  //Sends a new API request using the search input and updates state to allow a new path to be rendered\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.performSearch(this.query.value);\r\n    e.currentTarget.reset();\r\n    this.props.history.push(\"/search\");\r\n  };\r\n\r\n  render() {\r\n    return (\r\n        <form className=\"search-form\" onSubmit={this.handleSubmit}>\r\n          <input type=\"search\"\r\n                 name=\"search\"\r\n                 placeholder=\"Search...\"\r\n                 required\r\n                 onChange={this.onSearchChange}\r\n                 ref={ (input) => this.query = input}\r\n          />\r\n          <button type=\"submit\" className=\"search-button\" id=\"submit\">\r\n            <svg fill=\"#fff\" height=\"24\" viewBox=\"0 0 23 23\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n              <path\r\n                  d=\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\"></path>\r\n              <path d=\"M0 0h24v24H0z\" fill=\"none\"></path>\r\n            </svg>\r\n          </button>\r\n        </form>\r\n    )\r\n  };\r\n}\r\n\r\nexport default withRouter(Search);","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst Nav = (props) => {\r\n  return (\r\n      <nav className=\"main-nav\">\r\n        <ul>\r\n          <li><NavLink onClick={() => props.performSearch('Dry Tortugas') } exact to={`/dry tortugas`} >Dry Tortugas</NavLink></li>\r\n          <li><NavLink onClick={() => props.performSearch('sea turtles') } exact to={`/sea turtles`} >Sea Turtles</NavLink></li>\r\n          <li><NavLink onClick={() => props.performSearch('sand crabs') } exact to={`/sand crabs`} >Sand Crabs</NavLink></li>\r\n        </ul>\r\n      </nav>\r\n  );\r\n};\r\n\r\nexport default Nav","import React from 'react';\r\n\r\nconst Photo = props => (\r\n    <li>\r\n      <img src={props.url} key={props.id} alt={props.title}/>\r\n    </li>\r\n);\r\n\r\nexport default Photo;","import React from 'react';\r\nimport Photo from './Photo';\r\nimport { Redirect }from 'react-router-dom';\r\n\r\n//Generates the list of photos received as an array\r\nconst PhotoList = props => {\r\n  let results = props.data.activeSearch;\r\n  let photos;\r\n\r\n  //Retrieves the url data within props\r\n  function getUrl(data) {\r\n    return (data.url_l\r\n        ? data.url_l\r\n        : data.url_sq);\r\n  }\r\n  if((!props.data.loading) && (props.data.query) && (props.data.activeSearch !== null)){\r\n    photos = results.map(photo => <Photo url={getUrl(photo)} key={photo.id}/>);\r\n  } else if (props.data.activeSearch === null){\r\n    return <Redirect to=\"/no-search-results\"/>;\r\n  } else if ((!props.data.loading) && (props.activeSearch >= 0)) {\r\n    let value = props.activeSearch;\r\n    results = props.data.loadedSearch[value][0];\r\n    photos = results.map(photo => <Photo url={getUrl(photo)} key={photo.id}/>);\r\n  }\r\n\r\n  return (\r\n      <ul>\r\n        {photos}\r\n      </ul>\r\n  )\r\n};\r\n\r\nexport default PhotoList\r\n","import React from 'react';\r\n\r\nconst NotFound = () => (\r\n    <div>\r\n      <h3>No Results Found</h3>\r\n      <h4>That search did not return any results, please try again.</h4>\r\n    </div>\r\n);\r\n\r\nexport default NotFound;","import React, { PureComponent } from 'react';\nimport axios from 'axios';\nimport apiKey from './config';\nimport {\n  BrowserRouter,\n  Route,\n  Switch\n} from 'react-router-dom';\n\n//App components\nimport SearchForm from './components/SearchForm';\nimport Nav from './components/Nav';\nimport PhotoList from './components/PhotoList';\nimport NotFound from './components/NotFound';\n\nexport default class App extends PureComponent {\n\n  constructor() {\n    super();\n    this.state = {\n      loading: true,\n      loadedSearch: ['dry tortugas', 'sea turtles', 'sand crabs'],\n      query: ' ',\n      redirect: false,\n      activeSearch: [],\n      h2: ''\n    }\n  }\n\n  //When the page loads the initial activeSearch queries are called from the API\n  //The 2nd is displayed on the page, and the 1st is saved for later use\n  componentDidMount() {\n    this.buildPhotoStates();\n    this.performSearch('sea shells');\n  }\n\n  //This downloads the <Nav> button items as \"loadedSearch\" in state for later retrieval\n  buildPhotoStates (){\n    let searches = this.state.loadedSearch;\n    for(let i = 0; i < searches.length; i++){\n      let query = searches[i];\n      searches[i] = [];\n      axios.get(`https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=${apiKey}&tags=${query}&safe_search=1&content_type=photo&extras=url_l,url_sq&per_page=24&page=1&format=json&nojsoncallback=1`)\n          .then(response => {\n            searches[i].push(response.data.photos.photo);\n          })\n          .catch(error => {\n            console.log('Error fetching and parsing data', error);\n          });\n    }\n  }\n\n  handleNoResults(){\n    this.setState({\n      activeSearch: null,\n      h2: 'Sorry'\n    });\n  }\n\n  //Takes input and returns photos from the Flickr API\n  //API key is saved in ./config.js\n  performSearch = (query) => {\n    axios.get(`https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=${apiKey}&tags=${query}&safe_search=1&content_type=photo&extras=url_l,url_sq&per_page=24&page=1&format=json&nojsoncallback=1`)\n    //Response is returned in JSON as requested from the API\n        .then(response => {\n\n          //Checks to see if the search returned any results\n          (response.data.photos.photo.length > 0)\n              ?\n              this.setState({\n                activeSearch: response.data.photos.photo,\n                loading: false,\n                h2: query,\n                query,\n              })\n              : this.handleNoResults()\n        })\n        .catch(error => {\n          console.log('Error fetching and parsing data', error);\n        });\n  };\n\n  //Renders the page\n  render () {\n    return (\n        <BrowserRouter>\n          <div className=\"container\">\n            <SearchForm performSearch={this.performSearch}/>\n            <Nav performSearch={this.performSearch} />\n            <nav className=\"photo-container\">\n              <h2>{(this.state.h2 === 'Sorry')? 'Sorry' : `${this.state.h2} Photos`}</h2>\n              {\n                (this.state.loading)\n                    ? <p>Loading.....</p>\n                    : <Switch>\n                      <Route exact path=\"/\" render={()=> <PhotoList data={this.state}/>} />\n                      <Route path=\"/dry tortugas\" render={()=> <PhotoList data={this.state} search={0}/>}/>\n                      <Route path=\"/sea turtles\" render={()=> <PhotoList data={this.state} search={1}/>}/>\n                      <Route path=\"/sand crabs\" render={()=> <PhotoList data={this.state} search={2}/>}/>\n                      <Route path=\"/search\" render={()=> <PhotoList data={this.state} /> }  />\n                      <Route component={NotFound} />\n                    </Switch>\n              }\n            </nav>\n          </div>\n        </BrowserRouter>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}